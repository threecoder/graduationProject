合并代码的时候，先将自己的本地分支比如：dev_lrx提交好

可以试图用git pull origin dev 拉取更新dev

然后在本地的dev上面将自己的dev_lrx合并到dev

（本地合并过程会产生冲突，得先解决冲突，确保本地没问题了再说。冲突通常是修改了同个文件，这个时候就得看看要保留哪个改变还是都保留）

然后用git push origin dev 将本地的dev推送到远程


                                                常用git命令：

git init                               //初始化一个库
git add readme.txt                     //添加要提交的文件readme.txt（放进了暂存区）
git add .                              //加所有有修改的文件加入到暂存区（注意add和.之间有空格)
git commit -m "更新说明"                //将暂存区的内容加到本地仓库
git status                             //查看目前已经做了修改的文件
git diff readme.txt                    //查看readme修改了哪个部分
git branch dev                         //创建dev分支
git checkout dev                       //切换到dev分支，如果没有dev分支，会自动创建
git checkout -b dev                    //创建并切换到分支
git clone https://github.com/llllrx/gitskills.git               //将远程仓库克隆到本地
git clone -b dev http://10.1.1.11/service/tmall-service.git     //指定克隆某个分支，-b dev 的意思是将dev克隆到本地，-b作用是新建本地分支
git branch                             //查看本地分支
git merge dev                          //合并dev分支到当前分支
git merge --abort                      //取消此次分支合并
git remote add origin 地址             //关联远程仓库，地址格式类似于：git@server-name:path/repo-name.git
git push origin 分支名                  //将分支推送到远程。



                                                比较少用的命令:

git log                                //查看提交日志
git log --pretty=oneline               //查看提交日志，一行显示一次
git reset --hard HEAD^                 //HEAD指针只会指向当前版本，^表示回退一个版本，两个版本用 ^^ ，前一百个版本可以表示为HEAD~100
git reset --hard 版本号                 //回退到指定版本
git reflog                             //查看之前的命令以及对应的版本
cat readme.txt                         //输出文件内容
git diff HEAD -- readme.txt            //查看工作区和缓存区版本区别
git checkout -- readme.txt             //去除文件在工作区的修改，截止至上一次提交到缓存区的版本（其实就是用版本库里面的文件替代工作区的文件）
git reset HEAD readme.txt              //去除已经加入到缓存区域的文件修改再用上一条命令去除工作区修改
git rm test.txt                        //从库里面删除文件（需要提交确认后才会真正删除）
git branch -d dev                      //删除分支dev，当使用-D的时候，能强制删除
git merge --no-ff -m "merge with no-ff" dev                     //禁用Fast Forward情况下合并分支
git stash                              //将工作现场在不用提交保存的情况下，保存起来。不保存就切换分支的话，当前的修改将会丢失，类似于镜像
git stash list                         //查看保存的工作现场列表
git stash apply                        //恢复之前的工作内容
git stash drop                         //删除列表里面的保存的现场
git stash pop                          //恢复工作现场，并且删除保存的内容
git tag -d v0.1                        //删除标签
git tag <name>                         //打一个新标签，后面可加版本号，指定某一次提交的标签
git tag                                //可以查看所有标签